apply plugin: 'com.android.application'
//apply from: 'app.gradle'



android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion
    defaultConfig {
        applicationId "com.example.chajianhua"
        //两种方式都可以
//        minSdkVersion rootProject.ext.android.minSdkVersion
        minSdkVersion rootProject.ext.android["minSdkVersion"]
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName
//        minSdkVersion 24
//        targetSdkVersion 29
//        versionCode 1
//        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [AROUTER_MODULE_NAME: project.getName()]
            }
        }

    }
    buildTypes {


        debug{
//            def isShowLoaCat = true
            buildConfigField('String', 'APIVersionName', rootProject.ext.configField["APIVersionName"])
            buildConfigField('String', 'APIVersionCode', rootProject.ext.configField["APIVersionCode"])
            buildConfigField("String", "projectName", "\"" + project.getName() + "\"")

            buildConfigField('boolean', 'isShowLoaCat', "true")
            buildConfigField('String', 'ServerAddress', rootProject.ext.configField["ServerAddress_debug"])
        }

        release {
//            buildConfigField('String', 'APIVersionName', rootProject.ext.configField["APIVersionName"])
//            buildConfigField('String', 'APIVersionCode', rootProject.ext.configField["APIVersionCode"])
            initWith(debug)
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            buildConfigField('boolean', 'isShowLoaCat', "false")
            buildConfigField('String', 'ServerAddress', rootProject.ext.configField["ServerAddress_release"])
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    applicationVariants.all { variant ->
        variant.outputs.all { output ->
//            def outputFile = output.outputFile
//            def outputFile = outputFileName
            def fileName
            if (variant.buildType.name.equals('release')) {
                fileName = "${rootProject.ext.configField["APKVersionName_release"]}.apk"
            } else if (variant.buildType.name.equals('debug')) {
                fileName = "${rootProject.ext.configField["APKVersionName_debug"]}" + getVersionCode() + ".apk"
            }
//            ${project.projectDir}/../outputs/apks/+ variant.name
            outputFileName = new File("", fileName)
//            output.outputFile = new File(outputFile.parent, fileName)
//            outputFileName  = new File(outputFile.parent, fileName)
        }
    }
}

def getVersionCode() {// 获取版本号
    def versionFile = file('version.properties')// 读取第一步新建的文件
    if (versionFile.canRead()) {// 判断文件读取异常
        Properties versionProps = new Properties()
        versionProps.load(new FileInputStream(versionFile))
        def versionCode = 0
        def runTasks = gradle.startParameter.taskNames
        if ('assembleDev' in runTasks) {
            versionCode = versionProps['DEV_VERSION_CODE'].toInteger()// 读取文件里面的版本号
            // 版本号自增之后再写入文件（此处是关键，版本号自增+1）
            versionProps['DEV_VERSION_CODE'] = (++versionCode).toString()
            versionProps.store(versionFile.newWriter(), null)
        }
        return versionCode // 返回自增之后的版本号
    } else {
        throw new GradleException("Could not find version.properties!")
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'

    implementation rootProject.ext.dependencies["support-annotations"]
    //inject
    implementation rootProject.ext.dependencies.butterKnife
    annotationProcessor rootProject.ext.dependencies.butterKnifeAP
    implementation rootProject.ext.dependencies.dagger2
    annotationProcessor rootProject.ext.dependencies.dagger2AP
    //retrofit & rxjava
    implementation rootProject.ext.dependencies.retrofit
    implementation rootProject.ext.dependencies.retrofitConverterGson
    implementation rootProject.ext.dependencies.retrofitAdapterRxjava
    implementation rootProject.ext.dependencies.rxjava
    implementation rootProject.ext.dependencies.rxandroid
    //systemUtils
    implementation rootProject.ext.dependencies.gson
    implementation rootProject.ext.dependencies.permission

//    implementation rootProject.ext.dependencies.arouterApi
//    annotationProcessor rootProject.ext.dependencies.arouterCompiler
    implementation project(path: ':baselibrary')

    if (rootProject.ext.isBuildApp) {
//        runtimeOnly project(':modulebase')
    } else {
        implementation project(':moduleone')
        implementation project(':module_begin')
        implementation project(':module_home')
    }

    if(!rootProject.ext.useLocalProject){
        api project(path: ':../ChangeableUI/mytestlibrary')
    }else {
        api 'com.github.Gracefulwind:ChangeableUI:1.1'
    }

}
